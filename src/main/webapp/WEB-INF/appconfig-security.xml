<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/login**" access="isAnonymous()" />
		<intercept-url pattern="/registration**"
			access="isAnonymous()" />
		<intercept-url pattern="/resources/**"
			access="permitAll" />
		<intercept-url pattern="/**"
			access="isFullyAuthenticated()" />
		<intercept-url pattern="/user/**"
			access="isFullyAuthenticated()" />
		<!-- access="hasRole('ROLE_USER')" /> -->
		<intercept-url pattern="/admin/**"
			access="hasRole('ROLE_ADMIN')" />
		<form-login login-page="/login"
			default-target-url="/redirect"
			authentication-failure-url="/login?error"
			authentication-success-handler-ref="customLoginSuccessHandler"
			username-parameter="username" password-parameter="password" />
		<logout logout-success-url="/login?logout" />
	</http>

	<beans:bean id="httpFirewall"
		class="org.springframework.security.web.firewall.StrictHttpFirewall">
		<beans:property name="allowSemicolon" value="true" />
	</beans:bean>

	<http-firewall ref="httpFirewall" />

	<authentication-manager
		alias="authenticationManager">
		<authentication-provider
			ref="customAuthenticationProvider">
		</authentication-provider>
	</authentication-manager>

	<ldap-server id="contextSource"
		url="ldap://${ldap.server}:${ldap.port}/"
		manager-dn="${ldap.manager.user}"
		manager-password="${ldap.manager.password}" />

	<!-- using bean-based configuration here to set the DefaultLdapAuthoritiesPopulater 
		with ignorePartialResultsException=true. This is a known Spring/AD issue 
		and a workaround for it -->
	<beans:bean id="ldapAuthProvider"
		class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
		<beans:constructor-arg>
			<!-- the bind authenticator will first lookup the user using the service 
				account credentials, then attempt to bind the user with their password once 
				found -->
			<beans:bean id="bindAuthenticator"
				class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<beans:constructor-arg ref="contextSource" />
				<beans:property name="userSearch" ref="userSearch" />
			</beans:bean>
		</beans:constructor-arg>
		<beans:constructor-arg>
			<beans:bean
				class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
				<beans:constructor-arg ref="contextSource" />
				<beans:constructor-arg
					value="${ldap.search.base}" /> <!-- group search base -->
				<!-- <beans:property name="defaultRole" value="ROLE_USER" /> You can 
					add a default role to everyone if needed -->
				<beans:property name="searchSubtree" value="true" />
				<beans:property name="ignorePartialResultException"
					value="true" />
				<beans:property name="groupSearchFilter"
					value="(member={0})" />
				<beans:property name="groupRoleAttribute" value="cn" />
				<beans:property name="convertToUpperCase"
					value="false" />
			</beans:bean>
		</beans:constructor-arg>
	</beans:bean>
	<beans:bean id="userSearch"
		class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
		<beans:constructor-arg index="0"
			value="${ldap.search.base}" />
		<beans:constructor-arg index="1"
			value="(sAMAccountName={0})" />
		<beans:constructor-arg index="2"
			ref="contextSource" />
		<beans:property name="searchSubtree" value="true" />
	</beans:bean>

	<beans:bean id="encoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<beans:constructor-arg name="strength"
			value="11" />
	</beans:bean>

</beans:beans>